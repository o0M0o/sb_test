buildscript {
    ext {
        kotlinVersion = '1.3.30'
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")

        classpath("net.ltgt.gradle:gradle-apt-plugin:0.9")

        //kapt 'groupId:artifactId:version'
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "net.ltgt.apt"

apply plugin: 'kotlin-kapt'


group = 'com.wxm'
version = '0.0.1'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    mavenCentral()
}

configurations {
    providedRuntime
}


//可以将java目录下的所有非.java资源打包到classes下
sourceSets {
    main {
        resources {
            srcDir 'src/main/kotlin'
        }
    }
}

/**
 * 配置mapstruct任务
 */
tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            //默认交由spring管理，在外部可以直接使用@Autowired注入mapper
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-freemarker')
    //implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.session:spring-session-core')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    // mysql & mybatis
    implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
    runtimeOnly('mysql:mysql-connector-java')
    //implementation('tk.mybatis:mapper-spring-boot-starter:1.1.0')

    // JPA
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')

    // mapstruct
    implementation('org.mapstruct:mapstruct-jdk8:1.2.0.Final')
    //annotationProcessor("org.mapstruct:mapstruct-processor:1.2.0.Final")
    kapt("org.mapstruct:mapstruct-processor:1.3.0.Final")

    // swagger
    implementation('io.springfox:springfox-swagger2:2.8.0') {
        exclude group: 'org.mapstruct', module: 'mapstruct'
    }
    implementation('io.springfox:springfox-swagger-ui:2.8.0') {
        exclude group: 'org.mapstruct', module: 'mapstruct'
    }
    implementation 'io.swagger:swagger-jersey2-jaxrs:1.5.8'
    implementation('com.mangofactory:swagger-springmvc:1.0.2')
    implementation('com.mangofactory:swagger-models:1.0.2')
    implementation('com.wordnik:swagger-annotations:1.3.11')

    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

}
